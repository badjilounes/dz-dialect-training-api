/* tslint:disable */
/* eslint-disable */
/**
 * DzDialect Identity API
 * DzDialect Identity API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthSignInDto
 */
export interface AuthSignInDto {
    /**
     * 
     * @type {string}
     * @memberof AuthSignInDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSignInDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthSignUpDto
 */
export interface AuthSignUpDto {
    /**
     * 
     * @type {string}
     * @memberof AuthSignUpDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSignUpDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthTokenResponseDto
 */
export interface AuthTokenResponseDto {
    /**
     * 
     * @type {string}
     * @memberof AuthTokenResponseDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface MediaResponseDto
 */
export interface MediaResponseDto {
    /**
     * 
     * @type {string}
     * @memberof MediaResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MediaResponseDto
     */
    'url': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ProvidersEnum = {
    BASIC: 'basic',
    TWITTER: 'twitter',
    GOOGLE: 'google'
} as const;

export type ProvidersEnum = typeof ProvidersEnum[keyof typeof ProvidersEnum];


/**
 * 
 * @export
 * @interface UpdateEmailDto
 */
export interface UpdateEmailDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateNameDto
 */
export interface UpdateNameDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateNameDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateProfilePictureDto
 */
export interface UpdateProfilePictureDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfilePictureDto
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface UpdateUsernameDto
 */
export interface UpdateUsernameDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUsernameDto
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'email': string;
    /**
     * 
     * @type {ProvidersEnum}
     * @memberof UserResponseDto
     */
    'provider': ProvidersEnum;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    'externalId': string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Provider login callback
         * @param {string} providerName 
         * @param {string} code 
         * @param {string} error 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        providerCallback: async (providerName: string, code: string, error: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('providerCallback', 'providerName', providerName)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('providerCallback', 'code', code)
            // verify required parameter 'error' is not null or undefined
            assertParamExists('providerCallback', 'error', error)
            const localVarPath = `/authentication/{providerName}/callback`
                .replace(`{${"providerName"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Redirects user to provider authorize URL
         * @param {string} providerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirectToAuthorizeUrl: async (providerName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('redirectToAuthorizeUrl', 'providerName', providerName)
            const localVarPath = `/authentication/{providerName}`
                .replace(`{${"providerName"}}`, encodeURIComponent(String(providerName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign in user
         * @param {AuthSignInDto} authSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn: async (authSignInDto: AuthSignInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignInDto' is not null or undefined
            assertParamExists('signIn', 'authSignInDto', authSignInDto)
            const localVarPath = `/authentication/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign up a new user
         * @param {AuthSignUpDto} authSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (authSignUpDto: AuthSignUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignUpDto' is not null or undefined
            assertParamExists('signUp', 'authSignUpDto', authSignUpDto)
            const localVarPath = `/authentication/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Provider login callback
         * @param {string} providerName 
         * @param {string} code 
         * @param {string} error 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async providerCallback(providerName: string, code: string, error: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.providerCallback(providerName, code, error, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Redirects user to provider authorize URL
         * @param {string} providerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redirectToAuthorizeUrl(providerName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redirectToAuthorizeUrl(providerName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign in user
         * @param {AuthSignInDto} authSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIn(authSignInDto: AuthSignInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(authSignInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign up a new user
         * @param {AuthSignUpDto} authSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(authSignUpDto: AuthSignUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(authSignUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Provider login callback
         * @param {string} providerName 
         * @param {string} code 
         * @param {string} error 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        providerCallback(providerName: string, code: string, error: string, options?: any): AxiosPromise<void> {
            return localVarFp.providerCallback(providerName, code, error, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Redirects user to provider authorize URL
         * @param {string} providerName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirectToAuthorizeUrl(providerName: string, options?: any): AxiosPromise<void> {
            return localVarFp.redirectToAuthorizeUrl(providerName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign in user
         * @param {AuthSignInDto} authSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn(authSignInDto: AuthSignInDto, options?: any): AxiosPromise<AuthTokenResponseDto> {
            return localVarFp.signIn(authSignInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign up a new user
         * @param {AuthSignUpDto} authSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(authSignUpDto: AuthSignUpDto, options?: any): AxiosPromise<AuthTokenResponseDto> {
            return localVarFp.signUp(authSignUpDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Provider login callback
     * @param {string} providerName 
     * @param {string} code 
     * @param {string} error 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public providerCallback(providerName: string, code: string, error: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).providerCallback(providerName, code, error, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Redirects user to provider authorize URL
     * @param {string} providerName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public redirectToAuthorizeUrl(providerName: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).redirectToAuthorizeUrl(providerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign in user
     * @param {AuthSignInDto} authSignInDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public signIn(authSignInDto: AuthSignInDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).signIn(authSignInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign up a new user
     * @param {AuthSignUpDto} authSignUpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public signUp(authSignUpDto: AuthSignUpDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).signUp(authSignUpDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve one Media file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMediaFile', 'id', id)
            const localVarPath = `/media/{id}/file`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve one Media file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaFile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve one Media file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaFile(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getMediaFile(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve one Media file
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getMediaFile(id: string, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).getMediaFile(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a profile picture media for a user
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfilePictureMedia: async (file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createProfilePictureMedia', 'file', file)
            const localVarPath = `/users/create-profile-picture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check wether a user exists with this email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailExists: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('emailExists', 'email', email)
            const localVarPath = `/users/email/{email}/exists`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user email
         * @param {UpdateEmailDto} updateEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail: async (updateEmailDto: UpdateEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateEmailDto' is not null or undefined
            assertParamExists('updateEmail', 'updateEmailDto', updateEmailDto)
            const localVarPath = `/users/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user name
         * @param {UpdateNameDto} updateNameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateName: async (updateNameDto: UpdateNameDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateNameDto' is not null or undefined
            assertParamExists('updateName', 'updateNameDto', updateNameDto)
            const localVarPath = `/users/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNameDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user profile picture
         * @param {UpdateProfilePictureDto} updateProfilePictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePicture: async (updateProfilePictureDto: UpdateProfilePictureDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProfilePictureDto' is not null or undefined
            assertParamExists('updateProfilePicture', 'updateProfilePictureDto', updateProfilePictureDto)
            const localVarPath = `/users/picture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfilePictureDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user username
         * @param {UpdateUsernameDto} updateUsernameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsername: async (updateUsernameDto: UpdateUsernameDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUsernameDto' is not null or undefined
            assertParamExists('updateUsername', 'updateUsernameDto', updateUsernameDto)
            const localVarPath = `/users/username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUsernameDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check wether a user exists with this username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usernameExists: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usernameExists', 'username', username)
            const localVarPath = `/users/username/{username}/exists`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a profile picture media for a user
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfilePictureMedia(file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProfilePictureMedia(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check wether a user exists with this email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailExists(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailExists(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectedUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectedUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user email
         * @param {UpdateEmailDto} updateEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmail(updateEmailDto: UpdateEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmail(updateEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user name
         * @param {UpdateNameDto} updateNameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateName(updateNameDto: UpdateNameDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateName(updateNameDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user profile picture
         * @param {UpdateProfilePictureDto} updateProfilePictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfilePicture(updateProfilePictureDto: UpdateProfilePictureDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfilePicture(updateProfilePictureDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user username
         * @param {UpdateUsernameDto} updateUsernameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsername(updateUsernameDto: UpdateUsernameDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsername(updateUsernameDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check wether a user exists with this username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usernameExists(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usernameExists(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a profile picture media for a user
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfilePictureMedia(file: any, options?: any): AxiosPromise<MediaResponseDto> {
            return localVarFp.createProfilePictureMedia(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check wether a user exists with this email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailExists(email: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.emailExists(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get connected user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedUser(options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.getConnectedUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user email
         * @param {UpdateEmailDto} updateEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail(updateEmailDto: UpdateEmailDto, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.updateEmail(updateEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user name
         * @param {UpdateNameDto} updateNameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateName(updateNameDto: UpdateNameDto, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.updateName(updateNameDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user profile picture
         * @param {UpdateProfilePictureDto} updateProfilePictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePicture(updateProfilePictureDto: UpdateProfilePictureDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateProfilePicture(updateProfilePictureDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user username
         * @param {UpdateUsernameDto} updateUsernameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsername(updateUsernameDto: UpdateUsernameDto, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.updateUsername(updateUsernameDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check wether a user exists with this username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usernameExists(username: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.usernameExists(username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create a profile picture media for a user
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createProfilePictureMedia(file: any, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createProfilePictureMedia(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check wether a user exists with this email
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailExists(email: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailExists(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get connected user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getConnectedUser(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getConnectedUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user email
     * @param {UpdateEmailDto} updateEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateEmail(updateEmailDto: UpdateEmailDto, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateEmail(updateEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user name
     * @param {UpdateNameDto} updateNameDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateName(updateNameDto: UpdateNameDto, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateName(updateNameDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user profile picture
     * @param {UpdateProfilePictureDto} updateProfilePictureDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateProfilePicture(updateProfilePictureDto: UpdateProfilePictureDto, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateProfilePicture(updateProfilePictureDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user username
     * @param {UpdateUsernameDto} updateUsernameDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUsername(updateUsernameDto: UpdateUsernameDto, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUsername(updateUsernameDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check wether a user exists with this username
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usernameExists(username: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usernameExists(username, options).then((request) => request(this.axios, this.basePath));
    }
}


