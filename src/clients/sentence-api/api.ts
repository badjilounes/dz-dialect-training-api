/* tslint:disable */
/* eslint-disable */
/**
 * dz dialect sentence API
 * Sentences API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BulkCreateSentenceDto
 */
export interface BulkCreateSentenceDto {
    /**
     * 
     * @type {Array<BulkSentenceDto>}
     * @memberof BulkCreateSentenceDto
     */
    'sentenceList': Array<BulkSentenceDto>;
}
/**
 * 
 * @export
 * @interface BulkSentenceAdditionalInformationDto
 */
export interface BulkSentenceAdditionalInformationDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkSentenceAdditionalInformationDto
     */
    'pronouns'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkSentenceAdditionalInformationDto
     */
    'adjectives'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkSentenceAdditionalInformationDto
     */
    'verbs'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BulkSentenceAdditionalInformationDto
     */
    'tense'?: string;
    /**
     * 
     * @type {string}
     * @memberof BulkSentenceAdditionalInformationDto
     */
    'schema'?: string;
}
/**
 * 
 * @export
 * @interface BulkSentenceDto
 */
export interface BulkSentenceDto {
    /**
     * 
     * @type {string}
     * @memberof BulkSentenceDto
     */
    'dz': string;
    /**
     * 
     * @type {string}
     * @memberof BulkSentenceDto
     */
    'dz_ar': string;
    /**
     * 
     * @type {string}
     * @memberof BulkSentenceDto
     */
    'fr': string;
    /**
     * 
     * @type {BulkSentenceWordPropositionDto}
     * @memberof BulkSentenceDto
     */
    'word_propositions': BulkSentenceWordPropositionDto;
    /**
     * 
     * @type {BulkSentenceAdditionalInformationDto}
     * @memberof BulkSentenceDto
     */
    'additionnal_information': BulkSentenceAdditionalInformationDto;
}
/**
 * 
 * @export
 * @interface BulkSentenceWordPropositionDto
 */
export interface BulkSentenceWordPropositionDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkSentenceWordPropositionDto
     */
    'dz': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkSentenceWordPropositionDto
     */
    'fr': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateSentenceDto
 */
export interface CreateSentenceDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSentenceDto
     */
    'dz': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSentenceDto
     */
    'dz_ar': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSentenceDto
     */
    'fr': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSentenceDto
     */
    'word_propositions_dz': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSentenceDto
     */
    'word_propositions_fr': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSentenceDto
     */
    'pronouns': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSentenceDto
     */
    'adjectives': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateSentenceDto
     */
    'verbs': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateSentenceDto
     */
    'tense': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSentenceDto
     */
    'schema': string;
}
/**
 * 
 * @export
 * @interface SentenceResponseDto
 */
export interface SentenceResponseDto {
    /**
     * 
     * @type {string}
     * @memberof SentenceResponseDto
     */
    'dz': string;
    /**
     * 
     * @type {string}
     * @memberof SentenceResponseDto
     */
    'dz_ar': string;
    /**
     * 
     * @type {string}
     * @memberof SentenceResponseDto
     */
    'fr': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SentenceResponseDto
     */
    'word_propositions_dz': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SentenceResponseDto
     */
    'word_propositions_fr': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SentenceResponseDto
     */
    'pronouns': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SentenceResponseDto
     */
    'adjectives': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SentenceResponseDto
     */
    'verbs': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SentenceResponseDto
     */
    'tense': string;
    /**
     * 
     * @type {string}
     * @memberof SentenceResponseDto
     */
    'schema': string;
}

/**
 * SentenceApi - axios parameter creator
 * @export
 */
export const SentenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bulk create a sentence
         * @param {BulkCreateSentenceDto} bulkCreateSentenceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateSentence: async (bulkCreateSentenceDto: BulkCreateSentenceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkCreateSentenceDto' is not null or undefined
            assertParamExists('bulkCreateSentence', 'bulkCreateSentenceDto', bulkCreateSentenceDto)
            const localVarPath = `/sentence/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkCreateSentenceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a sentence
         * @param {CreateSentenceDto} createSentenceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSentence: async (createSentenceDto: CreateSentenceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSentenceDto' is not null or undefined
            assertParamExists('createSentence', 'createSentenceDto', createSentenceDto)
            const localVarPath = `/sentence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSentenceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of sentence
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentenceList: async (count: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('getSentenceList', 'count', count)
            const localVarPath = `/sentence/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SentenceApi - functional programming interface
 * @export
 */
export const SentenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SentenceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bulk create a sentence
         * @param {BulkCreateSentenceDto} bulkCreateSentenceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateSentence(bulkCreateSentenceDto: BulkCreateSentenceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateSentence(bulkCreateSentenceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a sentence
         * @param {CreateSentenceDto} createSentenceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSentence(createSentenceDto: CreateSentenceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SentenceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSentence(createSentenceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of sentence
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSentenceList(count: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSentenceList(count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SentenceApi - factory interface
 * @export
 */
export const SentenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SentenceApiFp(configuration)
    return {
        /**
         * 
         * @summary Bulk create a sentence
         * @param {BulkCreateSentenceDto} bulkCreateSentenceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateSentence(bulkCreateSentenceDto: BulkCreateSentenceDto, options?: any): AxiosPromise<Array<SentenceResponseDto>> {
            return localVarFp.bulkCreateSentence(bulkCreateSentenceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a sentence
         * @param {CreateSentenceDto} createSentenceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSentence(createSentenceDto: CreateSentenceDto, options?: any): AxiosPromise<SentenceResponseDto> {
            return localVarFp.createSentence(createSentenceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of sentence
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentenceList(count: number, options?: any): AxiosPromise<Array<SentenceResponseDto>> {
            return localVarFp.getSentenceList(count, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SentenceApi - object-oriented interface
 * @export
 * @class SentenceApi
 * @extends {BaseAPI}
 */
export class SentenceApi extends BaseAPI {
    /**
     * 
     * @summary Bulk create a sentence
     * @param {BulkCreateSentenceDto} bulkCreateSentenceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceApi
     */
    public bulkCreateSentence(bulkCreateSentenceDto: BulkCreateSentenceDto, options?: AxiosRequestConfig) {
        return SentenceApiFp(this.configuration).bulkCreateSentence(bulkCreateSentenceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a sentence
     * @param {CreateSentenceDto} createSentenceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceApi
     */
    public createSentence(createSentenceDto: CreateSentenceDto, options?: AxiosRequestConfig) {
        return SentenceApiFp(this.configuration).createSentence(createSentenceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of sentence
     * @param {number} count 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceApi
     */
    public getSentenceList(count: number, options?: AxiosRequestConfig) {
        return SentenceApiFp(this.configuration).getSentenceList(count, options).then((request) => request(this.axios, this.basePath));
    }
}


