/* tslint:disable */
/* eslint-disable */
/**
 * DZDialect API
 * DZDialect API v1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ContributionSentence
 */
export interface ContributionSentence {
    /**
     * 
     * @type {Array<Translation>}
     * @memberof ContributionSentence
     */
    'translations'?: Array<Translation>;
    /**
     * 
     * @type {string}
     * @memberof ContributionSentence
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContributionSentence
     */
    'category'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContributionSentence
     */
    'thumb_up_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof ContributionSentence
     */
    'thumb_down_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContributionSentence
     */
    'author_id'?: string;
}
/**
 * 
 * @export
 * @interface ContributionSentenceDTO
 */
export interface ContributionSentenceDTO {
    /**
     * 
     * @type {string}
     * @memberof ContributionSentenceDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContributionSentenceDTO
     */
    'dz'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContributionSentenceDTO
     */
    'dz_ar'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContributionSentenceDTO
     */
    'fr'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContributionSentenceDTO
     */
    'author_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContributionSentenceDTO
     */
    'thumb_up_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof ContributionSentenceDTO
     */
    'thumb_down_count'?: number;
}
/**
 * 
 * @export
 * @interface SentenceContentDTO
 */
export interface SentenceContentDTO {
    /**
     * 
     * @type {string}
     * @memberof SentenceContentDTO
     */
    'verb'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceContentDTO
     */
    'adverb'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceContentDTO
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceContentDTO
     */
    'adjective'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceContentDTO
     */
    'noun'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceContentDTO
     */
    'tense'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceContentDTO
     */
    'schema'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceContentDTO
     */
    'pronoun'?: string;
}
/**
 * 
 * @export
 * @interface SentenceDTO
 */
export interface SentenceDTO {
    /**
     * 
     * @type {string}
     * @memberof SentenceDTO
     */
    'dz'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceDTO
     */
    'dz_ar'?: string;
    /**
     * 
     * @type {string}
     * @memberof SentenceDTO
     */
    'fr'?: string;
    /**
     * 
     * @type {WordPropositionsDTO}
     * @memberof SentenceDTO
     */
    'word_propositions'?: WordPropositionsDTO;
    /**
     * 
     * @type {SentenceContentDTO}
     * @memberof SentenceDTO
     */
    'additionnal_information'?: SentenceContentDTO;
}
/**
 * 
 * @export
 * @interface Translation
 */
export interface Translation {
    /**
     * 
     * @type {string}
     * @memberof Translation
     */
    'lang'?: TranslationLangEnum;
    /**
     * 
     * @type {string}
     * @memberof Translation
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof Translation
     */
    'gender'?: TranslationGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof Translation
     */
    'ar_value'?: string;
}

export const TranslationLangEnum = {
    FR: 'FR',
    DZ: 'DZ'
} as const;

export type TranslationLangEnum = typeof TranslationLangEnum[keyof typeof TranslationLangEnum];
export const TranslationGenderEnum = {
    M: 'M',
    F: 'F',
    X: 'X'
} as const;

export type TranslationGenderEnum = typeof TranslationGenderEnum[keyof typeof TranslationGenderEnum];

/**
 * 
 * @export
 * @interface WordDTO
 */
export interface WordDTO {
    /**
     * 
     * @type {string}
     * @memberof WordDTO
     */
    'dz'?: string;
    /**
     * 
     * @type {string}
     * @memberof WordDTO
     */
    'dz_ar'?: string;
    /**
     * 
     * @type {string}
     * @memberof WordDTO
     */
    'fr'?: string;
}
/**
 * 
 * @export
 * @interface WordPropositionsDTO
 */
export interface WordPropositionsDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof WordPropositionsDTO
     */
    'dz'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof WordPropositionsDTO
     */
    'dz_ar'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof WordPropositionsDTO
     */
    'fr'?: Array<string>;
}

/**
 * AdjectiveControllerApi - axios parameter creator
 * @export
 */
export const AdjectiveControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdjectiveValues: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAdjectiveValues', 'id', id)
            const localVarPath = `/api/v1/adjectives/{id}/values`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [includeTemporal] 
         * @param {boolean} [includeDefinitive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdjectivesIds: async (includeTemporal?: boolean, includeDefinitive?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/adjectives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeTemporal !== undefined) {
                localVarQueryParameter['include_temporal'] = includeTemporal;
            }

            if (includeDefinitive !== undefined) {
                localVarQueryParameter['include_definitive'] = includeDefinitive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdjectiveControllerApi - functional programming interface
 * @export
 */
export const AdjectiveControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdjectiveControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdjectiveValues(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WordDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdjectiveValues(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [includeTemporal] 
         * @param {boolean} [includeDefinitive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAdjectivesIds(includeTemporal?: boolean, includeDefinitive?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAdjectivesIds(includeTemporal, includeDefinitive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdjectiveControllerApi - factory interface
 * @export
 */
export const AdjectiveControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdjectiveControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdjectiveValues(id: string, options?: any): AxiosPromise<Array<WordDTO>> {
            return localVarFp.getAdjectiveValues(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [includeTemporal] 
         * @param {boolean} [includeDefinitive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdjectivesIds(includeTemporal?: boolean, includeDefinitive?: boolean, options?: any): AxiosPromise<Set<string>> {
            return localVarFp.getAllAdjectivesIds(includeTemporal, includeDefinitive, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdjectiveControllerApi - object-oriented interface
 * @export
 * @class AdjectiveControllerApi
 * @extends {BaseAPI}
 */
export class AdjectiveControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdjectiveControllerApi
     */
    public getAdjectiveValues(id: string, options?: AxiosRequestConfig) {
        return AdjectiveControllerApiFp(this.configuration).getAdjectiveValues(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [includeTemporal] 
     * @param {boolean} [includeDefinitive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdjectiveControllerApi
     */
    public getAllAdjectivesIds(includeTemporal?: boolean, includeDefinitive?: boolean, options?: AxiosRequestConfig) {
        return AdjectiveControllerApiFp(this.configuration).getAllAdjectivesIds(includeTemporal, includeDefinitive, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdverbControllerApi - axios parameter creator
 * @export
 */
export const AdverbControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdverbById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAdverbById', 'id', id)
            const localVarPath = `/api/v1/adverbs/{id}/values`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdverbs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/adverbs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdverbControllerApi - functional programming interface
 * @export
 */
export const AdverbControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdverbControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdverbById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdverbById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAdverbs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAdverbs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdverbControllerApi - factory interface
 * @export
 */
export const AdverbControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdverbControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdverbById(id: string, options?: any): AxiosPromise<Array<SentenceDTO>> {
            return localVarFp.getAdverbById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdverbs(options?: any): AxiosPromise<Set<string>> {
            return localVarFp.getAllAdverbs(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdverbControllerApi - object-oriented interface
 * @export
 * @class AdverbControllerApi
 * @extends {BaseAPI}
 */
export class AdverbControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdverbControllerApi
     */
    public getAdverbById(id: string, options?: AxiosRequestConfig) {
        return AdverbControllerApiFp(this.configuration).getAdverbById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdverbControllerApi
     */
    public getAllAdverbs(options?: AxiosRequestConfig) {
        return AdverbControllerApiFp(this.configuration).getAllAdverbs(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DzDialectApiSpringApplicationApi - axios parameter creator
 * @export
 */
export const DzDialectApiSpringApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home2: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home3: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home4: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home5: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home6: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DzDialectApiSpringApplicationApi - functional programming interface
 * @export
 */
export const DzDialectApiSpringApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DzDialectApiSpringApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async home(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.home(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async home1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.home1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async home2(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.home2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async home3(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.home3(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async home4(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.home4(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async home5(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.home5(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async home6(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.home6(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DzDialectApiSpringApplicationApi - factory interface
 * @export
 */
export const DzDialectApiSpringApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DzDialectApiSpringApplicationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home(options?: any): AxiosPromise<string> {
            return localVarFp.home(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home1(options?: any): AxiosPromise<string> {
            return localVarFp.home1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home2(options?: any): AxiosPromise<string> {
            return localVarFp.home2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home3(options?: any): AxiosPromise<string> {
            return localVarFp.home3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home4(options?: any): AxiosPromise<string> {
            return localVarFp.home4(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home5(options?: any): AxiosPromise<string> {
            return localVarFp.home5(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        home6(options?: any): AxiosPromise<string> {
            return localVarFp.home6(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DzDialectApiSpringApplicationApi - object-oriented interface
 * @export
 * @class DzDialectApiSpringApplicationApi
 * @extends {BaseAPI}
 */
export class DzDialectApiSpringApplicationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DzDialectApiSpringApplicationApi
     */
    public home(options?: AxiosRequestConfig) {
        return DzDialectApiSpringApplicationApiFp(this.configuration).home(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DzDialectApiSpringApplicationApi
     */
    public home1(options?: AxiosRequestConfig) {
        return DzDialectApiSpringApplicationApiFp(this.configuration).home1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DzDialectApiSpringApplicationApi
     */
    public home2(options?: AxiosRequestConfig) {
        return DzDialectApiSpringApplicationApiFp(this.configuration).home2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DzDialectApiSpringApplicationApi
     */
    public home3(options?: AxiosRequestConfig) {
        return DzDialectApiSpringApplicationApiFp(this.configuration).home3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DzDialectApiSpringApplicationApi
     */
    public home4(options?: AxiosRequestConfig) {
        return DzDialectApiSpringApplicationApiFp(this.configuration).home4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DzDialectApiSpringApplicationApi
     */
    public home5(options?: AxiosRequestConfig) {
        return DzDialectApiSpringApplicationApiFp(this.configuration).home5(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DzDialectApiSpringApplicationApi
     */
    public home6(options?: AxiosRequestConfig) {
        return DzDialectApiSpringApplicationApiFp(this.configuration).home6(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NounControllerApi - axios parameter creator
 * @export
 */
export const NounControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNounsIds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/nouns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNounValues: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNounValues', 'id', id)
            const localVarPath = `/api/v1/nouns/{id}/values`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NounControllerApi - functional programming interface
 * @export
 */
export const NounControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NounControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNounsIds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNounsIds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNounValues(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WordDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNounValues(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NounControllerApi - factory interface
 * @export
 */
export const NounControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NounControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNounsIds(options?: any): AxiosPromise<Set<string>> {
            return localVarFp.getAllNounsIds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNounValues(id: string, options?: any): AxiosPromise<Array<WordDTO>> {
            return localVarFp.getNounValues(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NounControllerApi - object-oriented interface
 * @export
 * @class NounControllerApi
 * @extends {BaseAPI}
 */
export class NounControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NounControllerApi
     */
    public getAllNounsIds(options?: AxiosRequestConfig) {
        return NounControllerApiFp(this.configuration).getAllNounsIds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NounControllerApi
     */
    public getNounValues(id: string, options?: AxiosRequestConfig) {
        return NounControllerApiFp(this.configuration).getNounValues(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NumberControllerApi - axios parameter creator
 * @export
 */
export const NumberControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNumbers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/numbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNumberById', 'id', id)
            const localVarPath = `/api/v1/numbers/{id}/values`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [min] 
         * @param {number} [max] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomNumbers: async (count?: number, min?: number, max?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/numbers/random`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (min !== undefined) {
                localVarQueryParameter['min'] = min;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NumberControllerApi - functional programming interface
 * @export
 */
export const NumberControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NumberControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNumbers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNumbers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumberById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumberById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [min] 
         * @param {number} [max] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRandomNumbers(count?: number, min?: number, max?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRandomNumbers(count, min, max, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NumberControllerApi - factory interface
 * @export
 */
export const NumberControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NumberControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNumbers(options?: any): AxiosPromise<Set<string>> {
            return localVarFp.getAllNumbers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberById(id: string, options?: any): AxiosPromise<Array<SentenceDTO>> {
            return localVarFp.getNumberById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [min] 
         * @param {number} [max] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomNumbers(count?: number, min?: number, max?: number, options?: any): AxiosPromise<Array<SentenceDTO>> {
            return localVarFp.getRandomNumbers(count, min, max, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NumberControllerApi - object-oriented interface
 * @export
 * @class NumberControllerApi
 * @extends {BaseAPI}
 */
export class NumberControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumberControllerApi
     */
    public getAllNumbers(options?: AxiosRequestConfig) {
        return NumberControllerApiFp(this.configuration).getAllNumbers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumberControllerApi
     */
    public getNumberById(id: string, options?: AxiosRequestConfig) {
        return NumberControllerApiFp(this.configuration).getNumberById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [count] 
     * @param {number} [min] 
     * @param {number} [max] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumberControllerApi
     */
    public getRandomNumbers(count?: number, min?: number, max?: number, options?: AxiosRequestConfig) {
        return NumberControllerApiFp(this.configuration).getRandomNumbers(count, min, max, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PronounsControllerApi - axios parameter creator
 * @export
 */
export const PronounsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPronouns: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pronouns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PronounsControllerApi - functional programming interface
 * @export
 */
export const PronounsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PronounsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPronouns(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPronouns(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PronounsControllerApi - factory interface
 * @export
 */
export const PronounsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PronounsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPronouns(options?: any): AxiosPromise<Array<SentenceDTO>> {
            return localVarFp.getAllPronouns(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PronounsControllerApi - object-oriented interface
 * @export
 * @class PronounsControllerApi
 * @extends {BaseAPI}
 */
export class PronounsControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PronounsControllerApi
     */
    public getAllPronouns(options?: AxiosRequestConfig) {
        return PronounsControllerApiFp(this.configuration).getAllPronouns(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuestionsControllerApi - axios parameter creator
 * @export
 */
export const QuestionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionsControllerApi - functional programming interface
 * @export
 */
export const QuestionsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQuestions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQuestions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuestionsControllerApi - factory interface
 * @export
 */
export const QuestionsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions(options?: any): AxiosPromise<Array<SentenceDTO>> {
            return localVarFp.getAllQuestions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionsControllerApi - object-oriented interface
 * @export
 * @class QuestionsControllerApi
 * @extends {BaseAPI}
 */
export class QuestionsControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsControllerApi
     */
    public getAllQuestions(options?: AxiosRequestConfig) {
        return QuestionsControllerApiFp(this.configuration).getAllQuestions(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SentenceControllerApi - axios parameter creator
 * @export
 */
export const SentenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} xAuthorizationId 
         * @param {ContributionSentence} contributionSentence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSentence: async (xAuthorizationId: string, contributionSentence: ContributionSentence, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAuthorizationId' is not null or undefined
            assertParamExists('addSentence', 'xAuthorizationId', xAuthorizationId)
            // verify required parameter 'contributionSentence' is not null or undefined
            assertParamExists('addSentence', 'contributionSentence', contributionSentence)
            const localVarPath = `/api/v1/sentences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAuthorizationId !== undefined && xAuthorizationId !== null) {
                localVarHeaderParameter['x-authorization-id'] = String(xAuthorizationId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contributionSentence, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [alternativeCount] 
         * @param {string} [pronoun] 
         * @param {string} [verb] 
         * @param {string} [tense] 
         * @param {string} [noun] 
         * @param {string} [adjective] 
         * @param {string} [question] 
         * @param {string} [adverb] 
         * @param {boolean} [excludePositive] 
         * @param {boolean} [excludeNegative] 
         * @param {string} [sentenceSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRandomSentence: async (count?: number, alternativeCount?: number, pronoun?: string, verb?: string, tense?: string, noun?: string, adjective?: string, question?: string, adverb?: string, excludePositive?: boolean, excludeNegative?: boolean, sentenceSchema?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sentences/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (alternativeCount !== undefined) {
                localVarQueryParameter['alternative_count'] = alternativeCount;
            }

            if (pronoun !== undefined) {
                localVarQueryParameter['pronoun'] = pronoun;
            }

            if (verb !== undefined) {
                localVarQueryParameter['verb'] = verb;
            }

            if (tense !== undefined) {
                localVarQueryParameter['tense'] = tense;
            }

            if (noun !== undefined) {
                localVarQueryParameter['noun'] = noun;
            }

            if (adjective !== undefined) {
                localVarQueryParameter['adjective'] = adjective;
            }

            if (question !== undefined) {
                localVarQueryParameter['question'] = question;
            }

            if (adverb !== undefined) {
                localVarQueryParameter['adverb'] = adverb;
            }

            if (excludePositive !== undefined) {
                localVarQueryParameter['exclude_positive'] = excludePositive;
            }

            if (excludeNegative !== undefined) {
                localVarQueryParameter['exclude_negative'] = excludeNegative;
            }

            if (sentenceSchema !== undefined) {
                localVarQueryParameter['sentence_schema'] = sentenceSchema;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentenceById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSentenceById', 'id', id)
            const localVarPath = `/api/v1/sentences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentenceSchemas: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sentences/schemas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} up 
         * @param {string} xAuthorizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementThumb: async (id: string, up: boolean, xAuthorizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('incrementThumb', 'id', id)
            // verify required parameter 'up' is not null or undefined
            assertParamExists('incrementThumb', 'up', up)
            // verify required parameter 'xAuthorizationId' is not null or undefined
            assertParamExists('incrementThumb', 'xAuthorizationId', xAuthorizationId)
            const localVarPath = `/api/v1/sentences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (up !== undefined) {
                localVarQueryParameter['up'] = up;
            }

            if (xAuthorizationId !== undefined && xAuthorizationId !== null) {
                localVarHeaderParameter['x-authorization-id'] = String(xAuthorizationId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SentenceControllerApi - functional programming interface
 * @export
 */
export const SentenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SentenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} xAuthorizationId 
         * @param {ContributionSentence} contributionSentence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSentence(xAuthorizationId: string, contributionSentence: ContributionSentence, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContributionSentenceDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSentence(xAuthorizationId, contributionSentence, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [alternativeCount] 
         * @param {string} [pronoun] 
         * @param {string} [verb] 
         * @param {string} [tense] 
         * @param {string} [noun] 
         * @param {string} [adjective] 
         * @param {string} [question] 
         * @param {string} [adverb] 
         * @param {boolean} [excludePositive] 
         * @param {boolean} [excludeNegative] 
         * @param {string} [sentenceSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRandomSentence(count?: number, alternativeCount?: number, pronoun?: string, verb?: string, tense?: string, noun?: string, adjective?: string, question?: string, adverb?: string, excludePositive?: boolean, excludeNegative?: boolean, sentenceSchema?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateRandomSentence(count, alternativeCount, pronoun, verb, tense, noun, adjective, question, adverb, excludePositive, excludeNegative, sentenceSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSentenceById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContributionSentenceDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSentenceById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSentenceSchemas(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSentenceSchemas(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} up 
         * @param {string} xAuthorizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incrementThumb(id: string, up: boolean, xAuthorizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContributionSentenceDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incrementThumb(id, up, xAuthorizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SentenceControllerApi - factory interface
 * @export
 */
export const SentenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SentenceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} xAuthorizationId 
         * @param {ContributionSentence} contributionSentence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSentence(xAuthorizationId: string, contributionSentence: ContributionSentence, options?: any): AxiosPromise<ContributionSentenceDTO> {
            return localVarFp.addSentence(xAuthorizationId, contributionSentence, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [alternativeCount] 
         * @param {string} [pronoun] 
         * @param {string} [verb] 
         * @param {string} [tense] 
         * @param {string} [noun] 
         * @param {string} [adjective] 
         * @param {string} [question] 
         * @param {string} [adverb] 
         * @param {boolean} [excludePositive] 
         * @param {boolean} [excludeNegative] 
         * @param {string} [sentenceSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRandomSentence(count?: number, alternativeCount?: number, pronoun?: string, verb?: string, tense?: string, noun?: string, adjective?: string, question?: string, adverb?: string, excludePositive?: boolean, excludeNegative?: boolean, sentenceSchema?: string, options?: any): AxiosPromise<Array<SentenceDTO>> {
            return localVarFp.generateRandomSentence(count, alternativeCount, pronoun, verb, tense, noun, adjective, question, adverb, excludePositive, excludeNegative, sentenceSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentenceById(id: string, options?: any): AxiosPromise<ContributionSentenceDTO> {
            return localVarFp.getSentenceById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentenceSchemas(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getSentenceSchemas(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} up 
         * @param {string} xAuthorizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementThumb(id: string, up: boolean, xAuthorizationId: string, options?: any): AxiosPromise<ContributionSentenceDTO> {
            return localVarFp.incrementThumb(id, up, xAuthorizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SentenceControllerApi - object-oriented interface
 * @export
 * @class SentenceControllerApi
 * @extends {BaseAPI}
 */
export class SentenceControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} xAuthorizationId 
     * @param {ContributionSentence} contributionSentence 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceControllerApi
     */
    public addSentence(xAuthorizationId: string, contributionSentence: ContributionSentence, options?: AxiosRequestConfig) {
        return SentenceControllerApiFp(this.configuration).addSentence(xAuthorizationId, contributionSentence, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [count] 
     * @param {number} [alternativeCount] 
     * @param {string} [pronoun] 
     * @param {string} [verb] 
     * @param {string} [tense] 
     * @param {string} [noun] 
     * @param {string} [adjective] 
     * @param {string} [question] 
     * @param {string} [adverb] 
     * @param {boolean} [excludePositive] 
     * @param {boolean} [excludeNegative] 
     * @param {string} [sentenceSchema] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceControllerApi
     */
    public generateRandomSentence(count?: number, alternativeCount?: number, pronoun?: string, verb?: string, tense?: string, noun?: string, adjective?: string, question?: string, adverb?: string, excludePositive?: boolean, excludeNegative?: boolean, sentenceSchema?: string, options?: AxiosRequestConfig) {
        return SentenceControllerApiFp(this.configuration).generateRandomSentence(count, alternativeCount, pronoun, verb, tense, noun, adjective, question, adverb, excludePositive, excludeNegative, sentenceSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceControllerApi
     */
    public getSentenceById(id: string, options?: AxiosRequestConfig) {
        return SentenceControllerApiFp(this.configuration).getSentenceById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceControllerApi
     */
    public getSentenceSchemas(options?: AxiosRequestConfig) {
        return SentenceControllerApiFp(this.configuration).getSentenceSchemas(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {boolean} up 
     * @param {string} xAuthorizationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SentenceControllerApi
     */
    public incrementThumb(id: string, up: boolean, xAuthorizationId: string, options?: AxiosRequestConfig) {
        return SentenceControllerApiFp(this.configuration).incrementThumb(id, up, xAuthorizationId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VerbControllerApi - axios parameter creator
 * @export
 */
export const VerbControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVerbIds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/verbs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableTenses: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAvailableTenses', 'id', id)
            const localVarPath = `/api/v1/verbs/{id}/tenses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [tense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerbById: async (id: string, tense?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVerbById', 'id', id)
            const localVarPath = `/api/v1/verbs/{id}/values`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tense !== undefined) {
                localVarQueryParameter['tense'] = tense;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerbControllerApi - functional programming interface
 * @export
 */
export const VerbControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerbControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVerbIds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllVerbIds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableTenses(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableTenses(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [tense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVerbById(id: string, tense?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SentenceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVerbById(id, tense, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerbControllerApi - factory interface
 * @export
 */
export const VerbControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerbControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVerbIds(options?: any): AxiosPromise<Set<string>> {
            return localVarFp.getAllVerbIds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableTenses(id: string, options?: any): AxiosPromise<Set<string>> {
            return localVarFp.getAvailableTenses(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [tense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerbById(id: string, tense?: string, options?: any): AxiosPromise<Array<SentenceDTO>> {
            return localVarFp.getVerbById(id, tense, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerbControllerApi - object-oriented interface
 * @export
 * @class VerbControllerApi
 * @extends {BaseAPI}
 */
export class VerbControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerbControllerApi
     */
    public getAllVerbIds(options?: AxiosRequestConfig) {
        return VerbControllerApiFp(this.configuration).getAllVerbIds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerbControllerApi
     */
    public getAvailableTenses(id: string, options?: AxiosRequestConfig) {
        return VerbControllerApiFp(this.configuration).getAvailableTenses(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [tense] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerbControllerApi
     */
    public getVerbById(id: string, tense?: string, options?: AxiosRequestConfig) {
        return VerbControllerApiFp(this.configuration).getVerbById(id, tense, options).then((request) => request(this.axios, this.basePath));
    }
}


